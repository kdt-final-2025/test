name: Discord Notifications

on:
  pull_request:
    types: [opened, closed, reopened]
  pull_request_review:
    types: [submitted]
  pull_request_review_comment:
    types: [created]
  issue_comment:
    types: [created]
  push:
    branches:
      - main

jobs:
  notify_discord:
    runs-on: ubuntu-latest
    steps:
      - name: Determine Discord message
        id: set_message
        shell: bash
        run: |
          EVENT_NAME="${{ github.event_name }}"
          MESSAGE=""

          if [ "$EVENT_NAME" = "pull_request" ]; then
            ACTION="${{ github.event.action }}"
            TITLE=$(echo "${{ github.event.pull_request.title }}" | sed 's/"/\\"/g')
            URL="${{ github.event.pull_request.html_url }}"
            
            if [ "$ACTION" = "opened" ]; then
              MESSAGE=":sparkles: 새로운 Pull Request가 생성되었습니다!\\n제목: **$TITLE**\\nURL: $URL"
            elif [ "$ACTION" = "reopened" ]; then
              MESSAGE=":repeat: Pull Request가 다시 열렸습니다!\\n제목: **$TITLE**\\nURL: $URL"
            elif [ "$ACTION" = "closed" ]; then
              if [ "${{ github.event.pull_request.merged }}" = "true" ]; then
                MESSAGE=":white_check_mark: Pull Request가 머지되었습니다!\\n제목: **$TITLE**\\nURL: $URL"
              else
                MESSAGE=":x: Pull Request가 닫혔습니다.\\n제목: **$TITLE**\\nURL: $URL"
              fi
            fi
          
          elif [ "$EVENT_NAME" = "pull_request_review" ]; then
            REVIEWER="${{ github.event.review.user.login }}"
            REVIEW_STATE="${{ github.event.review.state }}"
            TITLE=$(echo "${{ github.event.pull_request.title }}" | sed 's/"/\\"/g')
            URL="${{ github.event.pull_request.html_url }}"
            COMMENT=$(echo "${{ github.event.review.body }}" | sed 's/"/\\"/g' | tr '\n' ' ' | cut -c 1-200)
            
            if [ "$REVIEW_STATE" = "approved" ]; then
              if [ -n "$COMMENT" ] && [ "$COMMENT" != "null" ]; then
                MESSAGE=":white_check_mark: **$REVIEWER**님이 Pull Request를 승인했습니다!\\n코멘트: $COMMENT\\nPull Request: **$TITLE**\\nURL: $URL"
              else
                MESSAGE=":white_check_mark: **$REVIEWER**님이 Pull Request를 승인했습니다!\\nPull Request: **$TITLE**\\nURL: $URL"
              fi
            elif [ "$REVIEW_STATE" = "changes_requested" ]; then
              MESSAGE=":warning: **$REVIEWER**님이 Pull Request에 변경을 요청했습니다!\\nPull Request: **$TITLE**\\nURL: $URL"
            else
              if [ -n "$COMMENT" ] && [ "$COMMENT" != "null" ]; then
                MESSAGE=":speech_balloon: **$REVIEWER**님이 리뷰 코멘트를 남겼습니다!\\nPull Request: **$TITLE**\\n코멘트: $COMMENT\\nURL: $URL"
              fi
            fi
          
          elif [ "$EVENT_NAME" = "pull_request_review_comment" ]; then
            # 파일의 특정 라인에 대한 단일 코멘트 처리
            AUTHOR="${{ github.event.comment.user.login }}"
            # 봇 댓글 필터링
            if [[ "$AUTHOR" == *[Bb][Oo][Tt]* ]]; then
              echo "Bot comment detected, skipping notification"
              exit 0
            fi
            
            PR_TITLE=$(echo "${{ github.event.pull_request.title }}" | sed 's/"/\\"/g')
            COMMENT_BODY=$(echo "${{ github.event.comment.body }}" | sed 's/"/\\"/g' | tr '\n' ' ' | cut -c 1-200)
            COMMENT_URL="${{ github.event.comment.html_url }}"
            FILE_PATH="${{ github.event.comment.path }}"
            LINE="${{ github.event.comment.line }}"
            
            MESSAGE=":mag: **$AUTHOR**님이 파일 코드 라인에 코멘트를 남겼습니다!\\nPR: **$PR_TITLE**\\n파일: \`$FILE_PATH:$LINE\`\\n코멘트: $COMMENT_BODY\\nURL: $COMMENT_URL"
          
          elif [ "$EVENT_NAME" = "issue_comment" ]; then
            # PR 댓글인지 확인
            if [ -n "${{ github.event.issue.pull_request }}" ]; then
              AUTHOR="${{ github.event.comment.user.login }}"
              # 봇 댓글 필터링
              if [[ "$AUTHOR" == *[Bb][Oo][Tt]* ]]; then
                echo "Bot comment detected, skipping notification"
                exit 0
              fi
              
              COMMENT=$(echo "${{ github.event.comment.body }}" | sed 's/"/\\"/g' | tr '\n' ' ' | cut -c 1-200)
              COMMENT_TRUNCATED=$([ ${#COMMENT} -gt 200 ] && echo "... (더 보려면 링크 클릭)" || echo "")
              CMT_URL="${{ github.event.comment.html_url }}"
              TITLE=$(echo "${{ github.event.issue.title }}" | sed 's/"/\\"/g')
              
              # 답글 여부 확인 개선
              if [ -z "${{ github.event.comment.in_reply_to_id }}" ]; then
                MESSAGE=":speech_balloon: **$AUTHOR**님이 PR에 새 코멘트를 남겼습니다!\\nPR: **$TITLE**\\n코멘트: $COMMENT$COMMENT_TRUNCATED\\nURL: $CMT_URL"
              else
                MESSAGE=":repeat: **$AUTHOR**님이 PR 코멘트에 답글을 남겼습니다!\\nPR: **$TITLE**\\n답글: $COMMENT$COMMENT_TRUNCATED\\nURL: $CMT_URL"
              fi
            fi
          
          elif [ "$EVENT_NAME" = "push" ]; then
            # 봇 커밋 필터링
            AUTHOR="${{ github.event.head_commit.author.name }}"
            if [[ "$AUTHOR" == *[Bb][Oo][Tt]* ]]; then
              echo "Bot push detected, skipping notification"
              exit 0
            fi
            
            COMMIT_MESSAGE=$(echo "${{ github.event.head_commit.message }}" | sed 's/"/\\"/g' | tr '\n' ' ' | cut -c 1-200)
            COMMIT_MESSAGE_TRUNCATED=$([ ${#COMMIT_MESSAGE} -gt 200 ] && echo "... (더 보려면 링크 클릭)" || echo "")
            COMMIT_URL="${{ github.event.head_commit.url }}"
            REPO="${{ github.repository }}"
            
            MESSAGE=":rocket: **$REPO** 저장소의 main 브랜치에 새 커밋!\\n작성자: **$AUTHOR**\\n메시지: $COMMIT_MESSAGE$COMMIT_MESSAGE_TRUNCATED\\nURL: $COMMIT_URL"
          fi

          # 디버깅용 이벤트 구조 출력 (로그에만 표시)
          echo "Event name: $EVENT_NAME"
          echo "Event path: $GITHUB_EVENT_PATH" 
          if [ -f "$GITHUB_EVENT_PATH" ]; then
            echo "Event data preview:"
            cat "$GITHUB_EVENT_PATH" | jq 'del(.comment.body) | del(.pull_request.body) | del(.issue.body)' || echo "Failed to parse event JSON"
          fi

          # 메시지가 비어있지 않은 경우에만 출력
          if [ -n "$MESSAGE" ]; then
            # 2000자 제한 적용
            MESSAGE="${MESSAGE:0:1950}"
            # 환경에 저장
            echo "has_message=true" >> $GITHUB_OUTPUT
            echo "discord_message=$MESSAGE" >> $GITHUB_OUTPUT
          else
            echo "has_message=false" >> $GITHUB_OUTPUT
          fi

      - name: Send notification to Discord
        if: steps.set_message.outputs.has_message == 'true'
        env:
          DISCORD_MESSAGE: ${{ steps.set_message.outputs.discord_message }}
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          # 정확한 JSON 형식으로 페이로드 생성
          payload=$(cat <<EOF
          {
            "content": "$DISCORD_MESSAGE"
          }
          EOF
          )
          
          # -f 옵션으로 응답을 확인하고 실패 시 출력
          response=$(curl -s -f -H "Content-Type: application/json" \
            -d "$payload" \
            "$DISCORD_WEBHOOK_URL" || echo "FAILED")
            
          if [[ "$response" == "FAILED" ]]; then
            echo "Discord webhook failed"
            echo "Payload was:"
            echo "$payload" | sed 's/"content": ".*"/"content": "[REDACTED]"/'
            exit 1
          else
            echo "Discord notification sent successfully!"
          fi
